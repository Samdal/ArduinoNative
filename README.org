#+AUTHOR: Halvard Samdal

* What is ArduinoNative?
ArduinoNative allows you to run Arduino code without Arduino.
ArduinoNative does not attempt to emulate or simulate an Arduino, it is a simple header-only implementation of the Arduino library in order to test and debug Arduino code.
Not only do you have the ability to use your favorite IDE with fancy code suggestions, you can even use a debugger to step through your code.
* Getting started
1. Download and install required tools to build C++ on your machine
2. Create a new C++ project and place ArduinoNative.hpp in that directory
3. Define AN_IMPL in one and only one of your source files
4. Include ArduinoNative.hpp
** A basic blink example
#+BEGIN_SRC C++
#define AN_DEBUG_ALL
#define AN_IMPL
#include "ArduinoNative.hpp"

void setup()
{
        pinMode(LED_BUILTIN, OUTPUT);
}

void loop()
{
        digitalWrite(LED_BUILTIN, HIGH);
        delay(1000);
        digitalWrite(LED_BUILTIN, LOW);
        delay(1000);
}
#+END_SRC

[[#more-examples][More Examples]]
* Supported boards
- Arduino Uno
- Arduino Pro or Pro Mini
- Arduino Nano
Choose board by defining a macro
#+BEGIN_SRC C++
#define AN_BOARD_PRO
#+END_SRC
If no board is defined it will default to Arduino Uno
* Features
** Implemented from Arduino library
[[https://www.arduino.cc/reference/en/][Arduino Library Reference]].
Note that less used functions haven't been tested that much.
*** Unfinished / not implemented
- [-] Analog I/O
  + [X] analogRead()
  + [X] analogWrite()
  + [ ] analogReference()
- [ ] Advanced I/O
  + [ ] noTone()
  + [ ] pulsing)
  + [ ] pulseInLong()
  + [ ] shiftIn()
  + [ ] shiftOut()
  + [ ] tone()
*** Exceptions
- HIGH and LOW interrupt modes don’t work, only CHANGE, RISING and FALLING
- serialEvent() is only supported on GCC and Clang, as it uses a GCC extension.
- PROGMEM, USB and Stream aren't implemented and likely never will be
** Other functions
It is recommended that you encapsulate these non-Arduino functions with some macro guards.
This prevents you from having to remove them when actually compile for an Arduino.
#+BEGIN_SRC C++
#ifdef ArduinoNative
// this will only be compiled if ArduinoNative is used
#endif
#+END_SRC
*** Change voltage of pin
#+BEGIN_SRC C++
an_set_voltage(pin, voltage)
#+END_SRC
*** Change voltage of pin from console input
#+BEGIN_SRC C++
an_request_voltage(pin)
#+END_SRC
*** Take input from console and put it in Serial buffer
#+BEGIN_SRC C++
Serial.an_take_input()
#+END_SRC
** Extra debug features
Debug features can be enabled by defining the following macros
- *AN_DEBUG_TIMESTAMP*: Prints a timestamp in milliseconds in front of all debug messages
- *AN_DEBUG_ALL*: Enables everything below
- *AN_DEBUG_DIGITALREAD*: Prints a message to console when digitalRead is called
- *AN_DEBUG_DIGITALWRITE*: Prints a message to console when digitalWrite is called
- *AN_DEBUG_ANALOGREAD*: Prints a message to console when analogRead is called
- *AN_DEBUG_ANALOGWRITE*: Prints a message to console when analogWrite is called
* Roadmap
- ☑️B̶a̶s̶i̶c̶ ̶f̶u̶n̶c̶t̶i̶o̶n̶a̶l̶i̶t̶y̶
- ☑️D̶e̶b̶u̶g̶ ̶o̶p̶t̶i̶o̶n̶s̶
- ☑️m̶o̶r̶e̶ ̶c̶o̶m̶p̶l̶e̶t̶e̶ ̶f̶u̶n̶c̶t̶i̶o̶n̶a̶l̶i̶t̶y̶
- ☑️W̶i̶n̶d̶o̶w̶s̶ ̶s̶u̶p̶p̶o̶r̶t̶
- ☑️S̶e̶r̶i̶a̶l̶ ̶f̶u̶l̶l̶ ̶f̶u̶n̶c̶t̶i̶o̶n̶a̶l̶i̶t̶y̶
- ☑️S̶t̶r̶i̶n̶g̶ ̶o̶b̶j̶e̶c̶t̶
- ☐Complete rest of Arduino Library
- ☐Support more boards
- ☐Debug schedules
- ☐Debug viewer to show pin status instead of Serial
* More examples
** Serial and AnalogRead
#+BEGIN_SRC C++
#define AN_BOARD_NANO
#define AN_IMPL
#include "ArduinoNative.hpp"

int analogpin = A7;

void setup()
{
        Serial.begin(9600);
        pinMode(analogpin, INPUT);
}

void loop()
{
#ifdef ArduinoNative
        an_request_voltage(analogpin);
#endif
        unsigned val = analogRead(analogpin);
        Serial.print("Read value ");
        Serial.println(val);
        float voltage = map(val, 0, 1023, 0.0, 5.0);
        Serial.print("Voltage on pin is: ");
        Serial.println(voltage, 2);
        delay(30);
}
#+END_SRC
Output:
#+BEGIN_SRC
set voltage of pin 21 to: 3.2
Read value 654
Voltage on pin is: 3.20
...
#+END_SRC
** Serial read
#+BEGIN_SRC C++
#define AN_IMPL
#include "ArduinoNative.hpp"

void setup()
{
        Serial.begin(9600);
#ifdef ArduinoNative
        Serial.an_take_input();
#endif
}

void loop()
{
        while(Serial.available())
                Serial.println((char)Serial.read());
}
#+END_SRC
Output:
#+BEGIN_SRC
ArduinoNative is requesting Serial input: hello
h
e
l
l
o
#+END_SRC
** millis() and specific debug modes
#+BEGIN_SRC C++
#define AN_DEBUG_DIGITALWRITE
#define AN_DEBUG_TIMESTAMP
#define AN_IMPL
#include "ArduinoNative.hpp"

#define LED1 5
#define LED2 6
#define LED1_DELAY 1000 // delay in ms
#define LED2_DELAY 2000 // delay in ms
unsigned long previous_LED1_change;
unsigned long previous_LED2_change;


void setup()
{
        pinMode(LED1, OUTPUT);
        pinMode(LED2, OUTPUT);
}

void loop()
{
        unsigned long t = millis();
        // turn on LED1 every second
        if (t - previous_LED1_change >= LED1_DELAY) {
                digitalWrite(LED1, !digitalRead(LED1));
                previous_LED1_change = t;
        }
        // turn on LED2 every half a second
        if (t - previous_LED2_change >= LED2_DELAY) {
                digitalWrite(LED2, !digitalRead(LED2));
                previous_LED2_change = t;
        }
}
#+END_SRC
Output:
#+BEGIN_SRC
500ms | Pin: 6 is now HIGH
1000ms | Pin: 5 is now HIGH
1000ms | Pin: 6 is now LOW
1500ms | Pin: 6 is now HIGH
2000ms | Pin: 5 is now LOW
2000ms | Pin: 6 is now LOW
2500ms | Pin: 6 is now HIGH
3000ms | Pin: 5 is now HIGH
3000ms | Pin: 6 is now LOW
3500ms | Pin: 6 is now HIGH
4000ms | Pin: 5 is now LOW
4000ms | Pin: 6 is now LOW
...
#+END_SRC
** Interrupts
#+BEGIN_SRC C++
#define AN_IMPL
#include "ArduinoNative.hpp"

unsigned long switchdelay;
unsigned short count;

void interrupt()
{
        Serial.print("INTERRUPT");
        Serial.println(count);
}

void setup() {
        Serial.begin(9600);
        attachInterrupt(digitalPinToInterrupt(2), interrupt, CHANGE);
}

// count 5 times, each time toggling pin 2
// after 5 times detach interrupt
void loop() {
        unsigned long t = millis();
        if (t - switchdelay >= 1000) {
#ifdef ArduinoNative
                an_set_voltage(2, !digitalRead(2) * 5.0);
#endif
                switchdelay = t;
                count++;
                if (count == 5)
                        detachInterrupt(digitalPinToInterrupt(2));
        }
}
#+END_SRC
Output:
#+BEGIN_SRC
INTERRUPT0
INTERRUPT1
INTERRUPT2
INTERRUPT3
INTERRUPT4
#+END_SRC
